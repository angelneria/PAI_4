name: DevSecOps Workflow

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd escapadas_a_tu_medida
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up database
        run: |
          cd escapadas_a_tu_medida
          python manage.py makemigrations
          python manage.py migrate

      - name: Run tests
        run: |
          cd escapadas_a_tu_medida
          python manage.py test

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: escapadas_a_tu_medida
          args: >
            -Dsonar.projectKey=angelneria_PAI_4
            -Dsonar.organization=angelneria
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Download SonarQube security hotspots in JSON format
        run: |
          curl -u "${{ secrets.SONAR_TOKEN }}:" \
          "https://sonarcloud.io/api/hotspots/search?projectKey=angelneria_PAI_4" \
          -o sonar-report.json

      - name: Create transformation script for SonarCloud JSON
        run: |
          cat << 'EOF' > transform_sonar.py
          #!/usr/bin/env python3
          import json
          import sys
          from datetime import datetime

          def map_severity(prob):
              mapping = {
                  "HIGH": "High",
                  "MEDIUM": "Medium",
                  "LOW": "Low"
              }
              return mapping.get(prob.upper(), "Info")

          def extract_file_path(component):
              if ":" in component:
                  return component.split(":", 1)[1]
              return component

          def main(input_file, output_file):
              with open(input_file, 'r', encoding='utf-8') as f:
                  data = json.load(f)
              findings = []
              for hotspot in data.get("hotspots", []):
                  title = f"{hotspot.get('message', '').strip()} - {hotspot.get('ruleKey', '')}"
                  description = (
                      f"Componente: {hotspot.get('component', '')}\n"
                      f"Línea: {hotspot.get('line', '')}\n"
                      f"Mensaje: {hotspot.get('message', '')}\n"
                      f"Fecha de creación: {hotspot.get('creationDate', '')}\n"
                      f"Fecha de actualización: {hotspot.get('updateDate', '')}"
                  )
                  creation_date = hotspot.get("creationDate", "")
                  try:
                      dt = datetime.fromisoformat(creation_date)
                      date_str = dt.strftime("%Y-%m-%d")
                  except Exception:
                      date_str = creation_date
                  finding = {
                      "title": title,
                      "description": description,
                      "severity": map_severity(hotspot.get("vulnerabilityProbability", "Info")),
                      "date": date_str,
                      "file_path": extract_file_path(hotspot.get("component", "")),
                      "line": hotspot.get("line", None)
                  }
                  findings.append(finding)
              output_json = {"findings": findings}
              with open(output_file, 'w', encoding='utf-8') as f:
                  json.dump(output_json, f, indent=2, ensure_ascii=False)
              print(f"Archivo transformado guardado en {output_file}")

          if __name__ == "__main__":
              if len(sys.argv) != 3:
                  print("Uso: python transform_sonar.py <archivo_entrada.json> <archivo_salida.json>")
                  sys.exit(1)
              main(sys.argv[1], sys.argv[2])
          EOF
          
      - name: Transform SonarCloud JSON to DefectDojo format
        run: |
          python transform_sonar.py sonar-report.json defectdojo_sonar.json

      - name: Reimport SonarQube report to DefectDojo
        run: |
          curl -X POST "https://demo.defectdojo.org/api/v2/import-scan/" \
          -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
          -H "Content-Type: multipart/form-data" \
          -F "engagement=17" \
          -F "scan_type=SonarQube API Import" \
          -F "file=@defectdojo_sonar.json" \
          -F "close_old_findings=True"

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.61.0/trivy_0.61.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.61.0_Linux-64bit.deb

      - name: Run Trivy scan and save report
        run: |
          trivy fs --severity HIGH,CRITICAL --ignore-unfixed --format json --output trivy-report.json .

      - name: Process and format Trivy report
        run: |
          echo "## Trivy Vulnerability Report" > summary.md
          echo "### Vulnerabilities Found: " >> summary.md
          jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | "- **Title**: \(.Title)\n  - **Severity**: \(.Severity)\n  - **PkgName**: \(.PkgName)\n  - **Fixed Version**: \(.FixedVersion)\n  - **Description**: \(.Description)\n  - [Link to CVE](\(.PrimaryURL))\n" ' trivy-report.json >> summary.md

      - name: Create GitHub issue with formatted Trivy report
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "Trivy Vulnerability Report"
          content-filepath: summary.md
          labels: security, vulnerability

      - name: Reimport Trivy report to DefectDojo
        run: |
          curl -X POST "https://demo.defectdojo.org/api/v2/reimport-scan/" \
          -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
          -H "Content-Type: multipart/form-data" \
          -F "engagement=17" \
          -F "scan_type=Trivy Scan" \
          -F "file=@trivy-report.json" \
          -F "close_old_findings=True"
